Section 6 - Assignment - LL_Find Middle Node

1. LL: Find Middle Node

Implement the find_middle_node method for the LinkedList class.
Note: this LinkedList implementation does not have a length member variable.

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        

class LinkedList:
    def __init__(self, value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node

        
    def append(self, value):
        new_node = Node(value)
        if self.head == None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        return True

    def find_middle_node(self):
    	<< Your code >>



Keep in mind the following requirements:

a. If the linked list has an even number of nodes, return the first node of the second half of the list.

b. The method should use a two-pointer approach, where one pointer (slow) moves one node at a time and the other pointer (fast) moves two nodes at a time.

c. When the fast pointer reaches the end of the list or has no next node, the slow pointer should be at the middle node of the list.

d. The method should return the middle node when the number of nodes is odd or the first node of the second half of the list if the list has an even number of nodes.

e. The method should only traverse the linked list once.  In other words, you can only use one loop.

